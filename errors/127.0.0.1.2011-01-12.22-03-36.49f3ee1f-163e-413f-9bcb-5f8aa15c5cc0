(dp1
S'output'
p2
S''
sS'layer'
p3
S'/opt/web2py/applications/marcado/controllers/clientes.py'
p4
sS'code'
p5
S'# coding: utf8\n\n@auth.requires_login()\ndef index():\n    """\n        Lista todos os clientes cadastrados\n    """\n    \n    class Virtual(object):\n        @virtualsettings(label=T(\'Nome do Cliente:\'))\n        def virtualtooltip(self):\n            text = \'Telefone para Contato: %s\'\n            tooltiptext = T(text % self.cliente.telefone)\n            return tooltiptext\n    \n    # Consultando todos os clientes\n    query = db.cliente.id > 0 or db.cliente.aniversario <= request.now\n    # clientes = db(query).select(orderby=db.cliente.nome)\n    \n    #Preparando a tabela    \n    table = plugins.powerTable\n    table.datasource = db.cliente\n    table.uitheme = \'le-flog\'\n    table.dtfeatures[\'sPaginationType\'] = \'scrolling\'\n    table.keycolumn = \'cliente.id\'  \n    table.columns = [\'cliente.nome\',\'cliente.endereco\',\'cliente.telefone\']\n    table.headers = \'labels\'\n    table.showkeycolumn = False\n    table.dtfeatures[\'bJQueryUI\'] = request.vars.get(\'jqueryui\',True)\n    table.columnsearch = True\n    table.extrajs = dict(details={\'detailscolumns\':\'cliente.nome,cliente.endereco,cliente.telefone\'},\n                       tooltip={\'type\':\'virtual\'}\n                       )    \n    table.virtualfields = Virtual()\n    \n    # Caso nao tiver nenhum registro mostrar mensagem\n    if clientes:\n        # Retornando os registros\n        return dict(clientes=clientes, table = table.create())        \n    else:\n        return dict(clientes = clientes, mensagem = T(\'sem_registros\'))\n\n@auth.requires_login()\ndef novo():\n    """\n        Exibe o formulario de cadastro dos clientes\n    """\n    return dict(form = crud.create(db.cliente))\n\n\n@auth.requires_login()\ndef editar():\n    """\n        Exibe o formulario de edicao com os dados\n        do cliente selecionado\n    """\n    #recupera o primeiro argumento, ou redireciona\n    id = request.args(0) or redirect(URL(\'index\'))\n    \n    return dict(form = crud.update(db.cliente, id))\n\n@auth.requires_login()\ndef detalhes():    \n    """\n        Exibe os detalhes do cliente selecionado\n    """\n    #recupera o primeiro argumento, ou redireciona\n    id = request.args(0) or redirect(URL(\'index\'))\n\n    # Consulta o cliente selecionado\n    query = db.cliente.id == int(id)\n    \n    return dict(cliente = db(query).select().first())\n\n@auth.requires_login()\ndef pesquisa():\n    """\n        Efetua a pesquisa dos clientes\n        a partir do seu nome\n    """\n    # Captura o valor do campo de pesquisa\n    palavra_chave = request.vars.nome\n\n    # Verifica se o campo esta vazio\n    if palavra_chave:\n        # Consulta os resultados da pesquisa\n        query = db.cliente.nome.like(\'%\'+palavra_chave+\'%\')\n        resultado = db(query or db.cliente.aniversario <= request.now).select()\n    \n        # Define qual view sera renderizada\n        response.view = \'clientes/index.html\'\n    \n        # Se encontrou alguma coisa, exibe o resultado\n        # da pesquisa, senao enviar mensagem que nao\n        # foi encontrado nada.\n        if resultado:\n            return dict(clientes = resultado)\n        else:\n            msg = T(\'nao_encontrado\')\n            return dict(clientes = resultado, mensagem = msg)\n    else:\n        # Define a view que sera renderizada\n        response.view = \'clientes/index.html\'\n    \n        # consulta todos os clientes\n        query = db.cliente.id > 0 and db.cliente.aniversario <= request.now\n        \n        # verifica se trouxe registros\n        clientes = db(query).select()\n        if clientes:\n            return dict(clientes = clientes)\n        else:\n            return dict(clientes = clientes, mensagem = T(\'sem_registros\')) \n        \n@auth.requires_login()\ndef excluir():\n    """\n        Exclui o cliente selecionado\n    """\n    #recupera o primeiro argumento, ou redireciona\n    id = request.args(0) or redirect(URL(\'index\'))\n    \n    # exclui o registro\n    cliente = db(db.cliente.id == int(id)).delete()\n\n    # Define a view que vai ser renderizada\n    response.view = \'clientes/index.html\'\n    \n    if cliente:\n        # Mostra mensagem de sucesso e redireciona para a lista de clientes\n        redirect(URL(request.application, \'clientes\',\'index\'))\n        response.flash = T(\'excluido\')\n    else:\n        redirect(URL(request.application, \'clientes\',\'index\'))\n        response.flash = T(\'excluido\')\n\nresponse._vars=response._caller(index)\n'
p6
sS'snapshot'
p7
(dp8
S'exception'
p9
(dp10
S'__hash__'
p11
S"<method-wrapper '__hash__' of exceptions.NameError object>"
p12
sS'__setattr__'
p13
S"<method-wrapper '__setattr__' of exceptions.NameError object>"
p14
sS'__reduce_ex__'
p15
S'<built-in method __reduce_ex__ of exceptions.NameError object>'
p16
sS'__getslice__'
p17
S"<method-wrapper '__getslice__' of exceptions.NameError object>"
p18
sS'__getitem__'
p19
S"<method-wrapper '__getitem__' of exceptions.NameError object>"
p20
sS'__setstate__'
p21
S'<built-in method __setstate__ of exceptions.NameError object>'
p22
sS'args'
p23
S'("global name \'clientes\' is not defined",)'
p24
sS'__reduce__'
p25
S'<built-in method __reduce__ of exceptions.NameError object>'
p26
sS'__str__'
p27
S"<method-wrapper '__str__' of exceptions.NameError object>"
p28
sS'__format__'
p29
S'<built-in method __format__ of exceptions.NameError object>'
p30
sS'__getattribute__'
p31
S"<method-wrapper '__getattribute__' of exceptions.NameError object>"
p32
sS'__class__'
p33
S"<type 'exceptions.NameError'>"
p34
sS'__unicode__'
p35
S'<built-in method __unicode__ of exceptions.NameError object>'
p36
sS'__delattr__'
p37
S"<method-wrapper '__delattr__' of exceptions.NameError object>"
p38
sS'__subclasshook__'
p39
S'<built-in method __subclasshook__ of type object>'
p40
sS'__repr__'
p41
S"<method-wrapper '__repr__' of exceptions.NameError object>"
p42
sS'__dict__'
p43
S'{}'
p44
sS'__sizeof__'
p45
S'<built-in method __sizeof__ of exceptions.NameError object>'
p46
sS'__doc__'
p47
S"'Name not found globally.'"
p48
sS'__init__'
p49
S"<method-wrapper '__init__' of exceptions.NameError object>"
p50
sS'__new__'
p51
S'<built-in method __new__ of type object>'
p52
ssS'evalue'
p53
S"global name 'clientes' is not defined"
p54
sS'request'
p55
(dp56
S'function'
p57
S"'index'"
p58
sS'body'
p59
S'<cStringIO.StringO object>'
p60
sS'wsgi'
p61
S"<Storage {'start_response': <function <lambda> a...>, 'HTTP_ACCEPT_ENCODING': 'gzip,deflate,sdch'}}>"
p62
sS'extension'
p63
S"'html'"
p64
sS'vars'
p65
S'<Storage {}>'
p66
sS'cid'
p67
S'None'
p68
sS'url'
p69
S'<gluon.html.XML object>'
p70
sS'raw_extension'
p71
S'None'
p72
sg23
S'[]'
p73
sS'controller'
p74
S"'clientes'"
p75
sS'cookies'
p76
S"<SimpleCookie: session_id_admin='127.0.0.1-c4c54...'127.0.0.1-122a9335-d972-430e-8cc5-7d477b8b920c'>"
p77
sS'application'
p78
S"'marcado'"
p79
sS'ajax'
p80
S'False'
p81
sS'client'
p82
S"'127.0.0.1'"
p83
sS'env'
p84
S"<Storage {'wsgi_multithread': True, 'http_accept... 'wsgi_run_once': False, 'remote_port': '46430'}>"
p85
sS'raw_args'
p86
S'None'
p87
sS'get_vars'
p88
S'<Storage {}>'
p89
sS'folder'
p90
S"'/opt/web2py/applications/marcado/'"
p91
sS'now'
p92
S'datetime.datetime(2011, 1, 12, 22, 3, 36, 130882)'
p93
sS'post_vars'
p94
S'<Storage {}>'
p95
ssS'frames'
p96
(lp97
(dp98
S'file'
p99
S'/opt/web2py/gluon/restricted.py'
p100
sS'dump'
p101
(dp102
S'environment'
p103
S"{'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'CRYPT': <class 'gluon.validators.CRYPT'>, ...}"
p104
sS'ccode'
p105
S'<code object <module> at 0x276da80, file "/opt/w...cations/marcado/controllers/clientes.py", line 3>'
p106
ssS'lnum'
p107
I188
sS'lines'
p108
(dp109
I192
S'        # XXX Show exception in Wing IDE if running in debugger'
p110
sI183
S'        if type(code) == types.CodeType:'
p111
sI184
S'            ccode = code'
p112
sI185
S'        else:'
p113
sI186
S'            ccode = compile2(code,layer)'
p114
sI187
S''
sI188
S'        exec ccode in environment'
p115
sI189
S'    except HTTP:'
p116
sI190
S'        raise'
p117
sI191
S'    except Exception:'
p118
ssS'call'
p119
S'(code="# coding: utf8\\n\\n@auth.requires_login()\\ndef index...cluido\')\\n\\nresponse._vars=response._caller(index)\\n", environment={\'A\': <class \'gluon.html.A\'>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'CENTER\': <class \'gluon.html.CENTER\'>, \'CLEANUP\': <class \'gluon.validators.CLEANUP\'>, \'CODE\': <class \'gluon.html.CODE\'>, \'CRYPT\': <class \'gluon.validators.CRYPT\'>, ...}, layer=\'/opt/web2py/applications/marcado/controllers/clientes.py\')'
p120
sS'func'
p121
S'restricted'
p122
sa(dp123
g99
S'/opt/web2py/applications/marcado/controllers/clientes.py'
p124
sg101
(dp125
sg107
I137
sg108
(dp126
I128
S''
sI129
S'    if cliente:'
p127
sI130
S'        # Mostra mensagem de sucesso e redireciona para a lista de clientes'
p128
sI131
S"        redirect(URL(request.application, 'clientes','index'))"
p129
sI132
S"        response.flash = T('excluido')"
p130
sI133
S'    else:'
p131
sI134
S"        redirect(URL(request.application, 'clientes','index'))"
p132
sI135
S"        response.flash = T('excluido')"
p133
sI126
S'    # Define a view que vai ser renderizada'
p134
sI127
S"    response.view = 'clientes/index.html'"
p135
ssg119
S'()'
p136
sg121
S'<module>'
p137
sa(dp138
g99
S'/opt/web2py/gluon/globals.py'
p139
sg101
(dp140
S'self'
p141
S'undefined'
p142
sS'f'
S'<function index>'
p143
ssg107
I95
sg108
(dp144
I96
S'        self._view_environment = None'
p145
sI97
S'        self._custom_commit = None'
p146
sI98
S'        self._custom_rollback = None'
p147
sI99
S''
sI90
S"        self.flash = ''           # used by the default view layout"
p148
sI91
S'        self.meta = Storage()     # used by web2py_ajax.html'
p149
sI92
S'        self.menu = []            # used by the default view layout'
p150
sI93
S'        self.files = []           # used by web2py_ajax.html'
p151
sI94
S'        self._vars = None'
p152
sI95
S'        self._caller = lambda f: f()'
p153
ssg119
S'(f=<function index>)'
p154
sg121
S'<lambda>'
p155
sa(dp156
g99
S'/opt/web2py/gluon/tools.py'
p157
sg101
(dp158
S'action'
p159
S'<function index>'
p160
sS'a'
S'()'
p161
sS'b'
g44
ssg107
I2297
sg108
(dp162
I2292
S'                    self.environment.session.flash = self.environment.response.flash'
p163
sI2293
S'                    return call_or_redirect(self.settings.on_failed_authentication,'
p164
sI2294
S'                                            self.settings.login_url + \\'
p165
sI2295
S"                                                '?_next='+urllib.quote(next)"
p166
sI2296
S'                                            )'
p167
sI2297
S'                return action(*a, **b)'
p168
sI2298
S'            f.__doc__ = action.__doc__'
p169
sI2299
S'            f.__name__ = action.__name__'
p170
sI2300
S'            f.__dict__.update(action.__dict__)'
p171
sI2301
S'            return f'
p172
ssg119
S'(*a=(), **b={})'
p173
sg121
S'f'
sa(dp174
g99
S'/opt/web2py/applications/marcado/controllers/clientes.py'
p175
sg101
(dp176
S'clientes'
p177
g142
ssg107
I37
sg108
(dp178
I32
S"                       tooltip={'type':'virtual'}"
p179
sI33
S'                       )'
p180
sI34
S'    table.virtualfields = Virtual()'
p181
sI35
S''
sI36
S'    # Caso nao tiver nenhum registro mostrar mensagem'
p182
sI37
S'    if clientes:'
p183
sI38
S'        # Retornando os registros'
p184
sI39
S'        return dict(clientes=clientes, table = table.create())'
p185
sI40
S'    else:'
p186
sI41
S"        return dict(clientes = clientes, mensagem = T('sem_registros'))"
p187
ssg119
S'()'
p188
sg121
S'index'
p189
sasS'pyver'
p190
S'Python 2.6.6: /usr/bin/python'
p191
sS'session'
p192
(dp193
S'flash'
p194
S'None'
p195
sS'_formkey[login]'
p196
S"'ca579910-3223-4b3e-b699-f0736fb67aa5'"
p197
sS'auth'
p198
S"<Storage {'expiration': 3600, 'user': <Storage {...1, 1, 12, 22, 3, 36, 130882), 'remember': False}>"
p199
ssS'etype'
p200
S"<type 'exceptions.NameError'>"
p201
sS'date'
p202
S'Wed Jan 12 22:03:36 2011'
p203
sS'response'
p204
(dp205
S'status'
p206
S'200'
p207
sg59
S'<cStringIO.StringO object>'
p208
sg76
S"<SimpleCookie: session_id_marcado='127.0.0.1-8cf1bc21-50e6-47c7-8e02-aa5de3aab032'>"
p209
sS'_vars'
p210
S'None'
p211
sS'title'
p212
S"'Marcado!'"
p213
sS'session_file'
p214
S"<open file '/opt/web2py/applications/marcado/ses...cf1bc21-50e6-47c7-8e02-aa5de3aab032', mode 'rb+'>"
p215
sS'flash'
p216
S"''"
p217
sS'_custom_rollback'
p218
S'None'
p219
sS'session_id'
p220
S"'127.0.0.1-8cf1bc21-50e6-47c7-8e02-aa5de3aab032'"
p221
sS'headers'
p222
S"<Storage {'Expires': 'Thu, 13 Jan 2011 00:03:36 ...he, must-revalidate, post-check=0, pre-check=0'}>"
p223
sS'meta'
p224
S"<Storage {'keywords': 'web2py, python, framework...Enterprise Framework', 'author': 'Gilson Filho'}>"
p225
sS'session_filename'
p226
S"'/opt/web2py/applications/marcado/sessions/127.0.0.1-8cf1bc21-50e6-47c7-8e02-aa5de3aab032'"
p227
sS'postprocessing'
p228
S'[]'
p229
sS'menu'
p230
S"[(<lazyT 'Home'>, False, <gluon.html.XML object>, []), (<lazyT 'This App'>, False, <gluon.html.XML object>, [(<lazyT 'Controller'>, False, <gluon.html.XML object>), (<lazyT 'View'>, False, <gluon.html.XML object>), (<lazyT 'Layout'>, False, <gluon.html.XML object>), (<lazyT 'Stylesheet'>, False, <gluon.html.XML object>), (<lazyT 'DB Model'>, False, <gluon.html.XML object>), (<lazyT 'Menu Model'>, False, <gluon.html.XML object>), (<lazyT 'Database'>, False, <gluon.html.XML object>), (<lazyT 'Errors'>, False, <gluon.html.XML object>), (<lazyT 'About'>, False, <gluon.html.XML object>)]), (<lazyT 'Resources'>, False, None, [(<lazyT 'Documentation'>, False, 'http://www.web2py.com/book', [(<lazyT 'Preface'>, False, 'http://www.web2py.com/book/default/chapter/00'), (<lazyT 'Introduction'>, False, 'http://www.web2py.com/book/default/chapter/01'), (<lazyT 'Python'>, False, 'http://www.web2py.com/book/default/chapter/02'), (<lazyT 'Overview'>, False, 'http://www.web2py.com/book/default/chapter/03'), (<lazyT 'The Core'>, False, 'http://www.web2py.com/book/default/chapter/04'), (<lazyT 'The Views'>, False, 'http://www.web2py.com/book/default/chapter/05'), (<lazyT 'Database'>, False, 'http://www.web2py.com/book/default/chapter/06'), (<lazyT 'Forms and Validators'>, False, 'http://www.web2py.com/book/default/chapter/07'), (<lazyT 'Access Control'>, False, 'http://www.web2py.com/book/default/chapter/08'), (<lazyT 'Services'>, False, 'http://www.web2py.com/book/default/chapter/09'), (<lazyT 'Ajax Recipes'>, False, 'http://www.web2py.com/book/default/chapter/10'), (<lazyT 'Deployment Recipes'>, False, 'http://www.web2py.com/book/default/chapter/11'), (<lazyT 'Other Recipes'>, False, 'http://www.web2py.com/book/default/chapter/12'), (<lazyT 'Buy this book'>, False, 'http://stores.lulu.com/web2py')]), (<lazyT 'Community'>, False, None, [(<lazyT 'Groups'>, False, 'http://www.web2py.com/examples/default/usergroups'), (<lazyT 'Twitter'>, False, 'http://twitter.com/web2py'), (<lazyT 'Live chat'>, False, 'http://mibbit.com/?channel=%23web2py&server=irc.mibbit.net'), (<lazyT 'User Voice'>, False, 'http://web2py.uservoice.com/')]), (<lazyT 'Web2py'>, False, 'http://www.web2py.com', [(<lazyT 'Download'>, False, 'http://www.web2py.com/examples/default/download'), (<lazyT 'Support'>, False, 'http://www.web2py.com/examples/default/support'), (<lazyT 'Quick Examples'>, False, 'http://web2py.com/examples/default/examples'), (<lazyT 'FAQ'>, False, 'http://web2py.com/AlterEgo'), (<lazyT 'Free Applications'>, False, 'http://web2py.com/appliances'), (<lazyT 'Plugins'>, False, 'http://web2py.com/plugins'), (<lazyT 'Recipes'>, False, 'http://web2pyslices.com/'), (<lazyT 'Demo'>, False, 'http://web2py.com/demo_admin'), (<lazyT 'Semantic'>, False, 'http://web2py.com/semantic'), (<lazyT 'Layouts'>, False, 'http://web2py.com/layouts'), (<lazyT 'Videos'>, False, 'http://www.web2py.com/examples/default/videos/')])])]"
p231
sS'_view_environment'
p232
S"{'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'CRYPT': <class 'gluon.validators.CRYPT'>, ...}"
p233
sS'session_id_name'
p234
S"'session_id_marcado'"
p235
sS'_custom_commit'
p236
S'None'
p237
sS'_caller'
p238
S'<function <lambda>>'
p239
sS'files'
p240
S'[]'
p241
sS'view'
p242
S"'clientes/index.html'"
p243
ssS'locals'
p244
(dp245
S'table'
p246
S"<Storage {'virtualfields': <Virtual object at 0x....nome', 'cliente.endereco', 'cliente.telefone']}>"
p247
sS'Virtual'
p248
S"<class 'Virtual'>"
p249
sS'query'
p250
S'<gluon.dal.Query object>'
p251
sssS'traceback'
p252
S'Traceback (most recent call last):\n  File "/opt/web2py/gluon/restricted.py", line 188, in restricted\n    exec ccode in environment\n  File "/opt/web2py/applications/marcado/controllers/clientes.py", line 137, in <module>\n  File "/opt/web2py/gluon/globals.py", line 95, in <lambda>\n    self._caller = lambda f: f()\n  File "/opt/web2py/gluon/tools.py", line 2297, in f\n    return action(*a, **b)\n  File "/opt/web2py/applications/marcado/controllers/clientes.py", line 37, in index\n    if clientes:\nNameError: global name \'clientes\' is not defined\n'
p253
s.