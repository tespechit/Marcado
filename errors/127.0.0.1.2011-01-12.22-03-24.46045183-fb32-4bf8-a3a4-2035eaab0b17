(dp1
S'output'
p2
S''
sS'layer'
p3
S'/opt/web2py/applications/marcado/controllers/clientes.py'
p4
sS'code'
p5
S'# coding: utf8\n\n@auth.requires_login()\ndef index():\n    """\n        Lista todos os clientes cadastrados\n    """\n    \n    class Virtual(object):\n        @virtualsettings(label=T(\'Nome do Cliente:\'))\n        def virtualtooltip(self):\n            text = \'Telefone para Contato: %s\'\n            tooltiptext = T(text % self.cliente.telefone)\n            return tooltiptext\n    \n    # Consultando todos os clientes\n    query = db.cliente.id > 0 or db.cliente.aniversario <= request.now\n    # clientes = db(query).select(orderby=db.cliente.nome)\n    \n    #Preparando a tabela    \n    table = plugins.powerTable\n    table.datasource = db.clientes\n    table.uitheme = \'le-flog\'\n    table.dtfeatures[\'sPaginationType\'] = \'scrolling\'\n    table.keycolumn = \'cliente.id\'  \n    table.columns = [\'cliente.nome\',\'cliente.endereco\',\'cliente.telefone\']\n    table.headers = \'labels\'\n    table.showkeycolumn = False\n    table.dtfeatures[\'bJQueryUI\'] = request.vars.get(\'jqueryui\',True)\n    table.columnsearch = True\n    table.extrajs = dict(details={\'detailscolumns\':\'cliente.nome,cliente.endereco,cliente.telefone\'},\n                       tooltip={\'type\':\'virtual\'}\n                       )    \n    table.virtualfields = Virtual()\n    \n    # Caso nao tiver nenhum registro mostrar mensagem\n    if clientes:\n        # Retornando os registros\n        return dict(clientes=clientes, table = table.create())        \n    else:\n        return dict(clientes = clientes, mensagem = T(\'sem_registros\'))\n\n@auth.requires_login()\ndef novo():\n    """\n        Exibe o formulario de cadastro dos clientes\n    """\n    return dict(form = crud.create(db.cliente))\n\n\n@auth.requires_login()\ndef editar():\n    """\n        Exibe o formulario de edicao com os dados\n        do cliente selecionado\n    """\n    #recupera o primeiro argumento, ou redireciona\n    id = request.args(0) or redirect(URL(\'index\'))\n    \n    return dict(form = crud.update(db.cliente, id))\n\n@auth.requires_login()\ndef detalhes():    \n    """\n        Exibe os detalhes do cliente selecionado\n    """\n    #recupera o primeiro argumento, ou redireciona\n    id = request.args(0) or redirect(URL(\'index\'))\n\n    # Consulta o cliente selecionado\n    query = db.cliente.id == int(id)\n    \n    return dict(cliente = db(query).select().first())\n\n@auth.requires_login()\ndef pesquisa():\n    """\n        Efetua a pesquisa dos clientes\n        a partir do seu nome\n    """\n    # Captura o valor do campo de pesquisa\n    palavra_chave = request.vars.nome\n\n    # Verifica se o campo esta vazio\n    if palavra_chave:\n        # Consulta os resultados da pesquisa\n        query = db.cliente.nome.like(\'%\'+palavra_chave+\'%\')\n        resultado = db(query or db.cliente.aniversario <= request.now).select()\n    \n        # Define qual view sera renderizada\n        response.view = \'clientes/index.html\'\n    \n        # Se encontrou alguma coisa, exibe o resultado\n        # da pesquisa, senao enviar mensagem que nao\n        # foi encontrado nada.\n        if resultado:\n            return dict(clientes = resultado)\n        else:\n            msg = T(\'nao_encontrado\')\n            return dict(clientes = resultado, mensagem = msg)\n    else:\n        # Define a view que sera renderizada\n        response.view = \'clientes/index.html\'\n    \n        # consulta todos os clientes\n        query = db.cliente.id > 0 and db.cliente.aniversario <= request.now\n        \n        # verifica se trouxe registros\n        clientes = db(query).select()\n        if clientes:\n            return dict(clientes = clientes)\n        else:\n            return dict(clientes = clientes, mensagem = T(\'sem_registros\')) \n        \n@auth.requires_login()\ndef excluir():\n    """\n        Exclui o cliente selecionado\n    """\n    #recupera o primeiro argumento, ou redireciona\n    id = request.args(0) or redirect(URL(\'index\'))\n    \n    # exclui o registro\n    cliente = db(db.cliente.id == int(id)).delete()\n\n    # Define a view que vai ser renderizada\n    response.view = \'clientes/index.html\'\n    \n    if cliente:\n        # Mostra mensagem de sucesso e redireciona para a lista de clientes\n        redirect(URL(request.application, \'clientes\',\'index\'))\n        response.flash = T(\'excluido\')\n    else:\n        redirect(URL(request.application, \'clientes\',\'index\'))\n        response.flash = T(\'excluido\')\n\nresponse._vars=response._caller(index)\n'
p6
sS'snapshot'
p7
(dp8
sS'traceback'
p9
S'Traceback (most recent call last):\n  File "/opt/web2py/gluon/restricted.py", line 188, in restricted\n    exec ccode in environment\n  File "/opt/web2py/applications/marcado/controllers/clientes.py", line 137, in <module>\n  File "/opt/web2py/gluon/globals.py", line 95, in <lambda>\n    self._caller = lambda f: f()\n  File "/opt/web2py/gluon/tools.py", line 2297, in f\n    return action(*a, **b)\n  File "/opt/web2py/applications/marcado/controllers/clientes.py", line 22, in index\n    table.datasource = db.clientes\n  File "/opt/web2py/gluon/dal.py", line 3451, in __getattr__\n    return dict.__getitem__(self,key)\nKeyError: \'clientes\'\n'
p10
s.